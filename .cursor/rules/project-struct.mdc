---
description: Create new dart language code files
globs: 
alwaysApply: false
---
# Struktura Projektu Flutter z Riverpod

**Opis katalogów:**

* **`lib/`**: Zawiera cały kod Dart aplikacji.
* **`lib/main.dart`**: Główny plik startowy. Konfiguruje i uruchamia aplikację, zazwyczaj umieszczając `ProviderScope` w drzewie widżetów, aby zainicjować system Riverpod.
* **`lib/src/`**: Standardowy katalog dla kodu źródłowego. Używany do grupowania głównej logiki aplikacji.
* **`lib/src/features/`**: Katalog, w którym kod aplikacji jest dzielony na niezależne moduły funkcjonalne.
* **`lib/src/features/[nazwa_funkcjonalnosci]/presentation/`**: Zawiera kod UI (widżety i ekrany) dla danej funkcjonalności. Te widżety zależą od Providerów z tej lub innych funkcjonalności, używając `ref.watch`, `ref.read` itp.
* **`lib/src/features/[nazwa_funkcjonalnosci]/domain/`**: (wzorzec DDD) Modele danych i logika domenowa niezależna od implementacji.
* **`lib/src/features/[nazwa_funkcjonalnosci]/data/`**: Zawiera implementacje serwisów (np. klienta API, repozytorium bazy danych), które służą jako źródła danych dla warstwy `application`.
* **`lib/src/features/[nazwa_funkcjonalnosci]/providers/`**: Katalog przechowujący definicje Riverpod Providerów, które udostępniają stan, logikę z `domain` lub serwisy z `data` do warstwy `presentation`.
* **`lib/src/common/`**: Katalog dla elementów współdzielonych w całej aplikacji (widżety, helpery, globalne serwisy/proidery).
* **`lib/src/models/`**: Definicje globalnych modeli danych (np. klas danych, enumów).
* **`lib/src/services/`**: Abstrakcje lub implementacje globalnych serwisów (np. `ApiService`), które mogą być dostarczane poprzez Providerów z `common/providers`.

* **`test/`**: Katalog na pliki testowe. Struktura testów często odzwierciedla strukturę `lib`, aby łatwo znaleźć testy dla danego komponentu. Testowanie Providerów i Notifierów w izolacji jest kluczową zaletą Riverpod.